chm_p2r_05_smoothed <- terra::focal(chm_p2r_05, w = kernel, fun = median, na.rm = TRUE)
ttops_chm_p2r_05_smoothed <- locate_trees(chm_p2r_05_smoothed, lmf(5))
algo <- dalponte2016(chm_p2r_05_smoothed, ttops_chm_p2r_05_smoothed)
las <- segment_trees(las, algo)
algo <- dalponte2016(chm_p2r_05_smoothed, ttops_chm_p2r_05_smoothed)
install.packages("future")
algo <- dalponte2016(chm_p2r_05_smoothed, ttops_chm_p2r_05_smoothed)
las <- segment_trees(las, algo)
plot(las, bg = "white", size = 4, color = "treeID", height = TRUE, treetops = TRUE)
library(lidR)
library(terra)
path = "C:/Users/allen/OneDrive/Desktop/Work/I-Tree Eco/Shapefiles/"
Shapefile_1 = "Plot_10.shp"
Shapefile_2 = "Plot_46.shp"
Shapefile_3 = "Plot_47.shp"
path = "C:/Users/allen/OneDrive/Desktop/Work/I-Tree Eco/Shapefiles/Plot_10.shp"
library(sf)
cp_shape = st_read(path)
View(cp_shape)
shp_path1 = "C:/Users/allen/OneDrive/Desktop/Work/I-Tree Eco/Shapefiles/Plot_10.shp"
shp_path2 = "C:/Users/allen/OneDrive/Desktop/Work/I-Tree Eco/Shapefiles/Plot_46.shp"
shp_path3 = "C:/Users/allen/OneDrive/Desktop/Work/I-Tree Eco/Shapefiles/Plot_47.shp"
rm(Shapefile_1)
rm(Shapefile_2)
rm(Shapefile_3)
rm(path)
cp_shape = st_read(shp_path1)
las_path1 = "C:/Users/allen/OneDrive/Desktop/Work/Urban Heat/Staten Island ITree/930142.las"
nlas = readLAS(files = las_path1, filter = "-drop_withheld")
plot(st_geometry(cp_shape))
cp_transformed <- st_transform(cp_shape, st_crs(nlas))
cp_clipped <- clip_roi(nlas, cp_transformed)
writeLAS(cp_clipped, output_path1)
output_path1 = "C:/Users/allen/OneDrive/Desktop/Work/Urban Heat/Staten Island ITree/Plot_10.las"
writeLAS(cp_clipped, output_path1)
cp_las <- readLAS(files = output_path1, filter = "-drop_withheld")
chm <- rasterize_canopy(cp_las, res=1, algorithm = p2r())
col <- height.colors(25)
plot(chm, col = col)
ttops_20ft <- locate_trees(cp_las, lmf(ws = 20))
ttops_30ft <- locate_trees(cp_las, lmf(ws = 30))
silva_20ft <- silva2016(chm, ttops_20ft)
silva_30ft <- silva2016(chm, ttops_30ft)
trees_silva_20 <- segment_trees(nlas, silva_20ft)
trees_silva_30 <- segment_trees(nlas, silva_30ft)
just_trees_s30 <- subset(trees_silva_30, !is.na(trees_silva_30$treeID))
plot(just_trees_s30)
just_trees_s20 <- subset(trees_silva_20, !is.na(trees_silva_20$treeID))
plot(just_trees_s20)
seg_las <- segment_shapes(cp_las, shp_plane(k = 15), "Coplanar", filter = ~Classification != 2L)
output_path2 = "C:/Users/allen/OneDrive/Desktop/Work/Urban Heat/Staten Island ITree/Plot_10_Segmented.las"
writeLAS(seg_las,output_path2)
chm <- rasterize_canopy(seg_las, res=1, algorithm = p2r())
col <- height.colors(25)
plot(chm, col = col)
ttops_20ft <- locate_trees(seg_las, lmf(ws = 20))
ttops_30ft <- locate_trees(seg_las, lmf(ws = 30))
silva_20ft <- silva2016(chm, ttops_20ft)
silva_30ft <- silva2016(chm, ttops_30ft)
trees_silva_20 <- segment_trees(seg_las, silva_20ft)
trees_silva_30 <- segment_trees(seg_las, silva_30ft)
just_trees_s30 <- subset(trees_silva_30, !is.na(trees_silva_30$treeID))
plot(just_trees_s30)
just_trees_s20 <- subset(trees_silva_20, !is.na(trees_silva_20$treeID))
plot(just_trees_s20)
chm <- rasterize_canopy(seg_las, res=0.2, algorithm = p2r())
col <- height.colors(25)
plot(chm, col = col)
chm <- rasterize_canopy(seg_las, res=0.2, algorithm = p2r(0.2, na.fill = tin()))
chm <- rasterize_canopy(seg_las, res=0.2, algorithm = p2r())
# chm <- rasterize_canopy(seg_las, res=0.2, algorithm = p2r(0.2, na.fill = tin()))
col <- height.colors(25)
plot(chm, col = col)
chm <- rasterize_canopy(seg_las, res=1, algorithm = p2r())
# chm <- rasterize_canopy(seg_las, res=0.2, algorithm = p2r(0.2, na.fill = tin()))
col <- height.colors(25)
plot(chm, col = col)
seg_las <- segment_shapes(cp_las, shp_plane(k = 15), "Coplanar", filter = ~Classification != 2L)
writeLAS(seg_las,output_path2)
chm <- rasterize_canopy(seg_las, res=1, algorithm = p2r())
ttops_20ft <- locate_trees(seg_las, lmf(ws = 20))
ttops_30ft <- locate_trees(seg_las, lmf(ws = 30))
silva_20ft <- silva2016(chm, ttops_20ft)
silva_30ft <- silva2016(chm, ttops_30ft)
trees_silva_20 <- segment_trees(seg_las, silva_20ft)
trees_silva_30 <- segment_trees(seg_las, silva_30ft)
just_trees_s30 <- subset(trees_silva_30, !is.na(trees_silva_30$treeID))
plot(just_trees_s30)
just_trees_s20 <- subset(trees_silva_20, !is.na(trees_silva_20$treeID))
plot(just_trees_s20)
las_path1 = "C:/Users/allen/OneDrive/Desktop/Work/Urban Heat/Staten Island ITree/930142.las"
las_path2 = "C:/Users/allen/OneDrive/Desktop/Work/Urban Heat/Staten Island ITree/925140_927140_Merged_Segmented.las"
shp_path1 = "C:/Users/allen/OneDrive/Desktop/Work/I-Tree Eco/Shapefiles/Plot_10.shp"
shp_path2 = "C:/Users/allen/OneDrive/Desktop/Work/I-Tree Eco/Shapefiles/Plot_46.shp"
shp_path3 = "C:/Users/allen/OneDrive/Desktop/Work/I-Tree Eco/Shapefiles/Plot_47.shp"
output_path1 = "C:/Users/allen/OneDrive/Desktop/Work/Urban Heat/Staten Island ITree/Plot_10.las"
output_path2 = "C:/Users/allen/OneDrive/Desktop/Work/Urban Heat/Staten Island ITree/Plot_10_Segmented.las"
cp_shape = st_read(shp_path1)
library(lidR)
library(terra)
library(sf)
las_path1 = "C:/Users/allen/OneDrive/Desktop/Work/Urban Heat/Staten Island ITree/930142.las"
las_path2 = "C:/Users/allen/OneDrive/Desktop/Work/Urban Heat/Staten Island ITree/925140_927140_Merged_Segmented.las"
shp_path1 = "C:/Users/allen/OneDrive/Desktop/Work/I-Tree Eco/Shapefiles/Plot_10.shp"
shp_path2 = "C:/Users/allen/OneDrive/Desktop/Work/I-Tree Eco/Shapefiles/Plot_46.shp"
shp_path3 = "C:/Users/allen/OneDrive/Desktop/Work/I-Tree Eco/Shapefiles/Plot_47.shp"
output_path1 = "C:/Users/allen/OneDrive/Desktop/Work/Urban Heat/Staten Island ITree/Plot_10.las"
output_path2 = "C:/Users/allen/OneDrive/Desktop/Work/Urban Heat/Staten Island ITree/Plot_10_Segmented.las"
cp_shape = st_read(shp_path1)
nlas = readLAS(files = las_path1, filter = "-drop_withheld")
plot(st_geometry(cp_shape))
cp_transformed <- st_transform(cp_shape, st_crs(nlas))
cp_clipped <- clip_roi(nlas, cp_transformed)
writeLAS(cp_clipped, output_path1)
cp_las <- readLAS(files = output_path1, filter = "-drop_withheld")
seg_las <- segment_shapes(cp_las, shp_plane(k = 15), "Coplanar", filter = ~Classification != 2L)
drop_coplanar <- filter_poi(seg_las, Coplanar != TRUE)
writeLAS(seg_las,output_path2)
chm <- rasterize_canopy(seg_las, res=0.5, algorithm = p2r(0.2, na.fill = tin()))
col <- height.colors(25)
plot(chm, col = col)
ttops_20ft <- locate_trees(seg_las, lmf(ws = 20))
ttops_30ft <- locate_trees(seg_las, lmf(ws = 30))
silva_20ft <- silva2016(chm, ttops_20ft)
silva_30ft <- silva2016(chm, ttops_30ft)
trees_silva_20 <- segment_trees(seg_las, silva_20ft)
trees_silva_30 <- segment_trees(seg_las, silva_30ft)
just_trees_s30 <- subset(trees_silva_30, !is.na(trees_silva_30$treeID))
plot(just_trees_s30)
just_trees_s20 <- subset(trees_silva_20, !is.na(trees_silva_20$treeID))
plot(just_trees_s20)
plot(drop_coplanar)
plot(chm, col = col)
x <- plot (drop_coplanar, bg = "white", size = 4)
add_treetops3d(x, ttops)
ttops <- locate_trees(drop_coplanar, lmf(ws = 3))
plot(chm, col = height.colors(50))
plot(sf::st_geometry(ttops), add = TRUE, pch = 3)
ttops <- locate_trees(drop_coplanar, lmf(ws = 10))
plot(chm, col = height.colors(50))
plot(sf::st_geometry(ttops), add = TRUE, pch = 3)
x <- plot (drop_coplanar, bg = "white", size = 4)
add_treetops3d(x, ttops)
ttops <- locate_trees(drop_coplanar, lmf(ws = 20))
plot(chm, col = height.colors(50))
plot(sf::st_geometry(ttops), add = TRUE, pch = 3)
x <- plot (drop_coplanar, bg = "white", size = 4)
add_treetops3d(x, ttops)
ttops <- locate_trees(drop_coplanar, lmf(ws = 20))
library(lidR)
library(terra)
library(sf)
# ================ start dalponte Algorithm
path = "C:/Users/allen/OneDrive/Desktop/Work/Urban Heat/Manhattan Test/2257.las"
las <- readLAS(path, select = "-keep_first -keep_class 3 4 5")
chm_p2r_05 <- rasterize_canopy(las, 0.5, p2r(subcircle = 0.2), pkg = "terra")
# Smoothed by median filter
kernel <- matrix(1, 3, 3)
chm_p2r_05_smoothed <- terra::focal(chm_p2r_05, w = kernel, fun = median, na.rm = TRUE)
ttops_chm_p2r_05_smoothed <- locate_trees(chm_p2r_05_smoothed, lmf(5))
# Apply the algorithm
algo <- dalponte2016(chm_p2r_05_smoothed, ttops_chm_p2r_05_smoothed)
las <- segment_trees(las, algo)
plot(las, bg = "white", size = 4, color = "treeID", height = TRUE, treetops = TRUE)
# ================ end dalponte Algorithm
# ================ start Clip Roi
las_path1 = "C:/Users/allen/OneDrive/Desktop/Work/Urban Heat/Staten Island ITree/930142.las"
las_path2 = "C:/Users/allen/OneDrive/Desktop/Work/Urban Heat/Staten Island ITree/925140_927140_Merged_Segmented.las"
shp_path1 = "C:/Users/allen/OneDrive/Desktop/Work/I-Tree Eco/Shapefiles/Plot_10.shp"
shp_path2 = "C:/Users/allen/OneDrive/Desktop/Work/I-Tree Eco/Shapefiles/Plot_46.shp"
shp_path3 = "C:/Users/allen/OneDrive/Desktop/Work/I-Tree Eco/Shapefiles/Plot_47.shp"
output_path1 = "C:/Users/allen/OneDrive/Desktop/Work/Urban Heat/Staten Island ITree/Plot_10.las"
output_path2 = "C:/Users/allen/OneDrive/Desktop/Work/Urban Heat/Staten Island ITree/Plot_10_Segmented.las"
cp_shape = st_read(shp_path1)
nlas = readLAS(files = las_path1, filter = "-drop_withheld")
plot(st_geometry(cp_shape))
cp_transformed <- st_transform(cp_shape, st_crs(nlas))
cp_clipped <- clip_roi(nlas, cp_transformed)
writeLAS(cp_clipped, output_path1)
cp_las <- readLAS(files = output_path1, filter = "-drop_withheld")
seg_las <- segment_shapes(cp_las, shp_plane(k = 15), "Coplanar", filter = ~Classification != 2L)
drop_coplanar <- filter_poi(seg_las, Coplanar != TRUE)
writeLAS(drop_coplanar,output_path2)
# chm <- rasterize_canopy(seg_las, res=1, algorithm = p2r())
chm <- rasterize_canopy(drop_coplanar, res=0.5, algorithm = p2r(0.2, na.fill = tin()))
col <- height.colors(25)
plot(chm, col = col)
ttops <- locate_trees(drop_coplanar, lmf(ws = 20))
plot(chm, col = height.colors(50))
plot(sf::st_geometry(ttops), add = TRUE, pch = 3)
x <- plot (drop_coplanar, bg = "white", size = 4)
add_treetops3d(x, ttops)
ttops_20ft <- locate_trees(drop_coplanar, lmf(ws = 20))
ttops_30ft <- locate_trees(drop_coplanar, lmf(ws = 30))
silva_20ft <- silva2016(chm, ttops_20ft)
silva_30ft <- silva2016(chm, ttops_30ft)
trees_silva_20 <- segment_trees(drop_coplanar, silva_20ft)
trees_silva_30 <- segment_trees(drop_coplanar, silva_30ft)
just_trees_s30 <- subset(trees_silva_30, !is.na(trees_silva_30$treeID))
plot(just_trees_s30)
just_trees_s20 <- subset(trees_silva_20, !is.na(trees_silva_20$treeID))
plot(just_trees_s20)
# ================ end  Clip Roi
x <- plot (drop_coplanar, bg = "white", size = 2)
add_treetops3d(x, ttops)
ttops_20ft <- locate_trees(drop_coplanar, lmf(ws = 20))
ttops_30ft <- locate_trees(drop_coplanar, lmf(ws = 30))
silva_20ft <- silva2016(chm, ttops_20ft)
silva_30ft <- silva2016(chm, ttops_30ft)
trees_silva_20 <- segment_trees(drop_coplanar, silva_20ft)
trees_silva_30 <- segment_trees(drop_coplanar, silva_30ft)
just_trees_s30 <- subset(trees_silva_30, !is.na(trees_silva_30$treeID))
plot(just_trees_s30)
just_trees_s20 <- subset(trees_silva_20, !is.na(trees_silva_20$treeID))
plot(just_trees_s20)
# ================ end  Clip Roi
plot(chm, col = height.colors(50))
plot(sf::st_geometry(ttops), add = TRUE, pch = 3)
chm <- rasterize_canopy(seg_las, res=1, algorithm = p2r())
col <- height.colors(25)
plot(chm, col = col)
ttops <- locate_trees(drop_coplanar, lmf(ws = 20))
plot(chm, col = height.colors(50))
plot(chm, col = height.colors(50))
plot(sf::st_geometry(ttops), add = TRUE, pch = 3)
x <- plot (drop_coplanar, bg = "white", size = 2)
add_treetops3d(x, ttops)
plot(add_treetops3d, col = height.colors(50))
plot(add_treetops3d)
plot(add_treetops3d)
ttops_20ft <- locate_trees(drop_coplanar, lmf(ws = 20))
just_trees_s30 <- subset(trees_silva_30, !is.na(trees_silva_30$treeID))
ttops_20ft <- locate_trees(drop_coplanar, lmf(ws = 20))
ttops_30ft <- locate_trees(drop_coplanar, lmf(ws = 30))
silva_20ft <- silva2016(chm, ttops_20ft)
silva_30ft <- silva2016(chm, ttops_30ft)
trees_silva_20 <- segment_trees(drop_coplanar, silva_20ft)
trees_silva_30 <- segment_trees(drop_coplanar, silva_30ft)
just_trees_s30 <- subset(trees_silva_30, !is.na(trees_silva_30$treeID))
plot(just_trees_s30)
just_trees_s30 <- subset(trees_silva_30, !is.na(trees_silva_30$treeID))
plot(just_trees_s30)
add_treetops3d(x, ttops)
plot(add_treetops3d())
chm <- rasterize_canopy(drop_coplanar, res=1, algorithm = p2r())
col <- height.colors(25)
plot(chm, col = col)
ttops <- locate_trees(drop_coplanar, lmf(ws = 20))
plot(chm, col = height.colors(50))
ttops <- locate_trees(drop_coplanar, lmf(ws = 20))
plot(chm, col = height.colors(50))
ttops <- locate_trees(drop_coplanar, lmf(ws = 20))
plot(chm, col = height.colors(50))
plot(sf::st_geometry(ttops), add = TRUE, pch = 3)
library(tidyverse)
setwd("C:/Users/allen/OneDrive/Desktop/Work/Scripts/Lidar Simulation")
wd <- getwd()
# source(file.path(wd, "src", "process_matlab_util.R"))
source("process_matlab_util.R")
# data_dir <- file.path(wd, "data", "STV")
data_dir <- file.path("C:/Users/allen/OneDrive/Desktop/Work/Scripts/lidarmodeling_202404")
mat_pine <- readMat(file.path(data_dir, "pine001data.mat"))
## read data into array of lists
## "tree" contains the data in the matlab object as a 3D array,
## and [,,] gets all of the contents of that array as a 2D array
## rows correspond to the tree properties (crown, stem, etc.), and columns
## refer to each tree in the dataset
pine <- mat_pine$tree[,,]
df_pine <- tibble(crown = pine[1,],
stem = pine[2,],
primary.branch = pine[3,],
secondary.branch = pine[4,],
tertiaries.branch = pine[5,],
leaf = pine[6,])
list_crown_pine <- map(df_pine$crown, \(arr) arr %>%
extract_first_val_pine)
df_crown_pine <- tibble(base = extract_var(list_crown_pine, "base"),
d1 = extract_var(list_crown_pine, "d1"),
d2 = extract_var(list_crown_pine, "d2"),
d3 = extract_var(list_crown_pine, "d3"))
df_crown_pine %<>%
mutate(crown_vol = calc_pine_001_crown_vol(v_rad = d1, h_rad = d2))
library(tidyverse)
library(magrittr)
library(purrr)
setwd("C:/Users/allen/OneDrive/Desktop/Work/Scripts/Lidar Simulation")
wd <- getwd()
# source(file.path(wd, "src", "process_matlab_util.R"))
source("process_matlab_util.R")
# data_dir <- file.path(wd, "data", "STV")
data_dir <- file.path("C:/Users/allen/OneDrive/Desktop/Work/Scripts/lidarmodeling_202404")
mat_pine <- readMat(file.path(data_dir, "pine001data.mat"))
## read data into array of lists
## "tree" contains the data in the matlab object as a 3D array,
## and [,,] gets all of the contents of that array as a 2D array
## rows correspond to the tree properties (crown, stem, etc.), and columns
## refer to each tree in the dataset
pine <- mat_pine$tree[,,]
df_pine <- tibble(crown = pine[1,],
stem = pine[2,],
primary.branch = pine[3,],
secondary.branch = pine[4,],
tertiaries.branch = pine[5,],
leaf = pine[6,])
list_crown_pine <- map(df_pine$crown, \(arr) arr %>%
extract_first_val_pine)
df_crown_pine <- tibble(base = extract_var(list_crown_pine, "base"),
d1 = extract_var(list_crown_pine, "d1"),
d2 = extract_var(list_crown_pine, "d2"),
d3 = extract_var(list_crown_pine, "d3"))
df_crown_pine
df_pine
library(tidyverse)
library(magrittr)
library(purrr)
setwd("C:/Users/allen/OneDrive/Desktop/Work/Scripts/Lidar Simulation")
wd <- getwd()
# source(file.path(wd, "src", "process_matlab_util.R"))
source("process_matlab_util.R")
# data_dir <- file.path(wd, "data", "STV")
data_dir <- file.path("C:/Users/allen/OneDrive/Desktop/Work/Scripts/lidarmodeling_202404")
mat_pine <- readMat(file.path(data_dir, "pine001data.mat"))
## read data into array of lists
## "tree" contains the data in the matlab object as a 3D array,
## and [,,] gets all of the contents of that array as a 2D array
## rows correspond to the tree properties (crown, stem, etc.), and columns
## refer to each tree in the dataset
pine <- mat_pine$tree[,,]
df_pine <- tibble(crown = pine[1,],
stem = pine[2,],
primary.branch = pine[3,],
secondary.branch = pine[4,],
tertiaries.branch = pine[5,],
leaf = pine[6,])
list_crown_pine <- map(df_pine$crown, \(arr) arr %>%
extract_first_val_pine)
df_crown_pine <- tibble(base = extract_var(list_crown_pine, "base"),
d1 = extract_var(list_crown_pine, "d1"),
d2 = extract_var(list_crown_pine, "d2"),
d3 = extract_var(list_crown_pine, "d3"))
df_crown_pine %<>%
# mutate(crown_vol = calc_pine_001_crown_vol(v_rad = d1, h_rad = d2))
mutate(crown_vol = calc_pine001_crown_vol(v_rad = d1, h_rad= d2, height = d3))
df_crown_pine %<>%
mutate(crown_vol = calc_pine001_crown_vol(d1, d2, d3))
setwd("C:/Users/allen/OneDrive/Desktop/Work/Scripts/Lidar Simulation")
wd <- getwd()
# source(file.path(wd, "src", "process_matlab_util.R"))
source("process_matlab_util.R")
# data_dir <- file.path(wd, "data", "STV")
data_dir <- file.path("C:/Users/allen/OneDrive/Desktop/Work/Scripts/lidarmodeling_202404")
mat_deciduous <- readMat(file.path(data_dir, "deciduous001data.mat"))
decid <- mat_deciduous$tree[,1,]
df_decid <- tibble(crown = decid[1,],
stem = decid[2,],
primary.branch = decid[3,],
secondary.branch = decid[4,],
tertiaries.branch = decid[5,],
leaf = decid[6,])
list_crown_decid <- map(df_decid$crown, array_to_numeric)
df_crown_decid <- tibble(base = extract_var(list_crown_decid, "base"),
d1 = extract_var(list_crown_decid, "d1"),
d2 = extract_var(list_crown_decid, "d2"),
d3 = extract_var(list_crown_decid, "d3"))
df_crown_decid %<>%
mutate(crown_vol = calc_decid_crown_vol(v_rad = d1, h_rad = d2))
map_dbl(list_crown_decid, \(vect) vect["base"] %>% unname)
map(df_decid$stem, array_to_numeric)
map(df_decid$primary.branch, array_to_numeric)
map(df_decid$leaf, array_to_numeric)
map(df_decid$crown, array_to_numeric)
map(df_decid$crown, array_to_numeric)
map(df_decid$stem
, array_to_numeric)
df_decid$stem
df_decid$crown
setwd("C:/Users/allen/OneDrive/Desktop/Work/Scripts/Lidar Simulation")
wd <- getwd()
source("process_matlab_util.R")
data_dir <- file.path(wd, "lidarmodeling_202404")
mat_deciduous <- readMat(file.path(data_dir, "deciduous001data.mat"))
decid <- mat_deciduous$tree[,,]
df_decid <- tibble(crown = decid[1,],
stem = decid[2,],
primary.branch = decid[3,],
secondary.branch = decid[4,],
tertiaries.branch = decid[5,],
leaf = decid[6,])
list_crown_decid <- map(df_decid$crown, array_to_numeric)
df_crown_decid <- tibble(
base = extract_var(list_crown_decid, "base"),
d1 = extract_var(list_crown_decid, "d1"),
d2 = extract_var(list_crown_decid, "d2"),
d3 = extract_var(list_crown_decid, "d3"))
df_crown_decid %<>%
mutate(crown_vol = calc_decid_crown_vol(d1, d2))
df_crown_decid$crown_vol %>% sum
df_crown_decid
setwd("C:/Users/allen/OneDrive/Desktop/Work/Scripts/Lidar Simulation")
wd <- getwd()
source("process_matlab_util.R")
data_dir <- file.path(wd, "lidarmodeling_202404")
mat_deciduous <- readMat(file.path(data_dir, "deciduous001data.mat"))
decid <- mat_deciduous$tree[,,]
df_decid <- tibble(crown = decid[1,],
stem = decid[2,],
primary.branch = decid[3,],
secondary.branch = decid[4,],
tertiaries.branch = decid[5,],
leaf = decid[6,])
decid_leaf_areas <- map_dbl(df_decid$leaf, calc_leaf_area_of_tree)
total_leaf_area_decid <- decid_leaf_areas %>% sum
primary_branch_area_decid <- map_dbl(df_decid$primary.branch,
calc_branch_area_of_tree) %>% sum
secondary_branch_area_decid <- map_dbl(df_decid$secondary.branch,
calc_branch_area_of_tree) %>% sum
tertiary_branch_area_decid <- map_dbl(df_decid$tertiaries.branch,
calc_branch_area_of_tree) %>% sum
total_branch_area_decid <-
primary_branch_area_decid +
secondary_branch_area_decid +
tertiary_branch_area_decid
decid_leaf_areas
total_leaf_area_decid
primary_branch_area_decid
secondary_branch_area_decid
tertiary_branch_area_decid
df_decid$leaf
d1_vect
decid_leaf_areas
total_leaf_area_decid
primary_branch_area_decid
secondary_branch_area_decid
tertiary_branch_area_decid
df_crown_decid$crown_vol %>% sum
df_crown_decid
df_decid$crown
map(df_decid$crown, array_to_numeric)
map(df_decid$crown$base, array_to_numeric)
df_decid$crown
df_decid$crown$base
df_decid$crown[24]
df_decid$crown[24][[1]]["base",]
df_decid$crown[24]["base", 1]
df_decid$crown[24]["base"]
value_base <- df_decid$crown[[24]]["base", 1]
df_decid$crown[24][1]
df_decid$crown
df_decid$crown[24]
df_decid$crown[24][1]
df_decid$crown[24][1][1]
value_base <- df_decid$crown[[24]]["base", 1]
df_decid$crown[[24]]
str(df_decid$crown[[24]])
str(df_decid$crown[24])
value_base <- df_decid$crown[[24]][1, 1]
str(df_decid$crown[[24]][1, 1])
value_base <- df_decid$crown[[24]]
value_base <- df_decid$crown[[24]][1, 1]
str(df_decid$crown[[24]][1, 1])
str(df_decid$crown[[24]])
str(df_decid$crown[[24]][1])
map(df_decid$crown[[24]][1], array_to_numeric)
df_decid$crown[[24]]
total_branch_area_decid
setwd("C:/Users/allen/OneDrive/Desktop/Work/Scripts/Lidar Simulation")
wd <- getwd()
source("process_matlab_util.R")
data_dir <- file.path(wd, "lidarmodeling_202404")
mat_pine <- readMat(file.path(data_dir, "pine001data.mat"))
## read data into array of lists
## "tree" contains the data in the matlab object as a 3D array,
## and [,,] gets all of the contents of that array as a 2D array
## rows correspond to the tree properties (crown, stem, etc.), and columns
## refer to each tree in the dataset
pine <- mat_pine$tree[,,]
df_pine <- tibble(crown = pine[1,],
stem = pine[2,],
primary.branch = pine[3,],
secondary.branch = pine[4,],
tertiaries.branch = pine[5,],
leaf = pine[6,])
list_crown_pine <- map(df_pine$crown, \(arr) arr %>%
extract_first_val)
setwd("C:/Users/allen/OneDrive/Desktop/Work/Scripts/Lidar Simulation")
wd <- getwd()
source("process_matlab_util.R")
data_dir <- file.path(wd, "lidarmodeling_202404")
mat_pine <- readMat(file.path(data_dir, "pine001data.mat"))
## read data into array of lists
## "tree" contains the data in the matlab object as a 3D array,
## and [,,] gets all of the contents of that array as a 2D array
## rows correspond to the tree properties (crown, stem, etc.), and columns
## refer to each tree in the dataset
pine <- mat_pine$tree[,,]
df_pine <- tibble(crown = pine[1,],
stem = pine[2,],
primary.branch = pine[3,],
secondary.branch = pine[4,],
tertiaries.branch = pine[5,],
leaf = pine[6,])
list_crown_pine <- map(df_pine$crown, \(arr) arr %>%
extract_first_val_pine)
df_crown_pine <- tibble(base = extract_var(list_crown_pine, "base"),
d1 = extract_var(list_crown_pine, "d1"),
d2 = extract_var(list_crown_pine, "d2"),
d3 = extract_var(list_crown_pine, "d3"))
df_crown_pine %<>%
mutate(crown_vol = calc_pine001_crown_vol(d1, d2, d3))
## calculate crown volume
df_crown_pine
df_crown_pine$crown_vol %>% sum
